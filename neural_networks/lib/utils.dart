import 'dart:math';

import 'package:ml_linalg/matrix.dart';
import 'package:ml_linalg/vector.dart';

Matrix outerProduct(Vector v1, Vector v2) {
  List<Vector> result = [];
  int m = v1.length;
  for (int i = 0; i < m; i++) {
    result.add((v2.subvector(0, v2.length) * v1[i]));
  }
  return Matrix.fromRows(result);
}

double sigmoid(double x) {
  return 1.0 / (1.0 + exp(-x));
}

Vector vectorizedSigmoid(Vector z) {
  return Vector.fromList(z.map(sigmoid).toList());
}

double sigmoidPrime(double x) {
  return sigmoid(x) * (1 - sigmoid(x));
}

Vector vectorizedSigmoidPrime(Vector z) {
  return Vector.fromList(z.map(sigmoidPrime).toList());
}

// Guassian Random generated by GPT
extension GaussianRandom on Random {
  double nextGaussian({double mean = 0, double stdDev = 1}) {
    double u1 = this.nextDouble();
    double u2 = this.nextDouble();

    double randStdNormal = sqrt(-2.0 * log(u1)) * cos(2 * pi * u2);

    return mean + stdDev * randStdNormal;
  }

  List<double> nextGaussians(int n, {double mean = 0, double stdDev = 1}) {
    return List<double>.generate(n, (_) => nextGaussian(mean: mean, stdDev: stdDev));
  }
}

extension IntegerRandom on Random {
  List<double> nextInts(int n, int range) {
    List<double> result = [];
    Random random = Random();
    for (int i = 0; i < n; i++) {
      var number = random.nextInt(range).toDouble();
      if (random.nextBool()) {
        number = -number;
      }
      result.add(number);
    }
    return result;
  }
}
